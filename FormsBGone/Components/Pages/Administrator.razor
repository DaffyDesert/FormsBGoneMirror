@page "/administrator"

@using FormsBGone.Model;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using System.IO;
@using System.Threading.Tasks;
@using System.Linq;
@using System.Diagnostics;

@using Microsoft.AspNetCore.Authorization
@inject IAccountService accountService
@inject IJSRuntime js
@inject NavigationManager NavManager
@inject CapstoneContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer


@if (Authorized)
{

    <div class="header">
        <h1>Welcome, Admin!</h1>
        <div class="header-right">
            <div class="dropdown">
                <button class="btn btn-dropdown">Directories</button>
                <div class="dropdown-content">
                    <a href="/home">Forms Directory</a>
                    <a href="#">Student Directory</a>
                    <a href="#">Staff Directory</a>
                </div>
            </div>
            <button class="btn btn-signout" @onclick="SignOut">Sign Out</button>
        </div>
    </div>

    <hr />

    <div class="header-container">
        <div class="forms-directory">
            <h2>Forms Directory</h2>
        </div>
        <div class="add-file-btn">
            <button class="btn btn-primary" @onclick="ShowAddFileModal">
                <i class="fas fa-plus"></i> Add Form
            </button>
        </div>
    </div>

    <ul class="file-list">
        @foreach (var file in fileList)
        {
            <li class="file-item">
                <a href="@file.Link" target="_blank">@file.Name</a>
                <div class="file-item-buttons">
                    <button class="btn btn-secondary" @onclick="() => EditFile(file)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteFile(file)">Delete</button>
                </div>
            </li>
        }
    </ul>

    @if (isAddFileModalVisible)
    {
        <div class="modal-overlay">
            <div class="modal">
                <h2>Add New Form</h2>
                <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">

                    

            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
            <label for="formName">Form Name:</label>
            <InputText id="formName" class="custom-form-control" @bind-Value="newFile.FormName" />
            </div>

            <div class="form-group">
            <label for="description">Short Description (Optional):</label>
            <InputText id="description" class="custom-form-control" @bind-Value="newFile.Description" />
            </div>

            <div class="form-group">
            <label for="expirationDate">Expiration Date:</label>
            <InputDate id="expirationDate" class="custom-form-control" @bind-Value="newFile.ExpirationDate" />
            </div>

            <div class="form-group">
            <label for="pdfFile">Upload PDF:</label>
            <InputFile id="pdfFile" class="custom-form-control" OnChange="HandleFileSelected" />
            </div>

            <div class="form-group">
            <label for="assignedTo">Assigned To:</label>
            <select id="assignedTo" class="custom-form-control" @bind="newFile.AssignedTo">
            <option value="">-- Select --</option>
            <option value="-1">All</option>
            </select>
            </div>

            <div class="button-group">
            <button type="submit" class="btn btn-primary">Submit</button>
            <button type="button" class="btn btn-secondary" @onclick="HideAddFileModal">Cancel</button>
            </div>

            

                </EditForm>
            </div>
        </div>
    }
}
else
{
    <p>Error 401: Unauthorized</p>
}


@code {
    private bool Authorized = false;
    protected override async Task OnInitializedAsync()
    {
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        Authorized = await customAuthProvider.IsAuthenticated("Admin");
    }


    private bool isAddFileModalVisible = false;
    private FileModel newFile = new FileModel();
    private IBrowserFile selectedFile;
    private string fileError = string.Empty;

    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private List<FileItem> fileList = new();

    protected override void OnInitialized()
    {
        // Initialize the EditContext and ValidationMessageStore
        editContext = new EditContext(newFile);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnFieldChanged += HandleFieldChanged;

        LoadFilesFromUploadsDirectory();
    }

    private void ShowAddFileModal()
    {
        isAddFileModalVisible = true;
    }

    private void HideAddFileModal()
    {
        isAddFileModalVisible = false;
        ClearForm();
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(newFile.FormName))
        {
            messageStore.Clear(e.FieldIdentifier);
            Debug.WriteLine($"Field changed: {e.FieldIdentifier.FieldName}, New Value: {newFile.FormName}");
            StateHasChanged();
        }
    }

    private bool ValidateFile()
    {
        bool isValid = true;
        messageStore.Clear();

        if (selectedFile == null)
        {
            messageStore.Add(() => newFile.PdfFile, "A PDF file must be uploaded.");
            isValid = false;
        }
        else if (selectedFile.ContentType != "application/pdf")
        {
            messageStore.Add(() => newFile.PdfFile, "Only PDF files are allowed.");
            isValid = false;
        }

        editContext.NotifyValidationStateChanged();
        return isValid;
    }

    private void ClearForm()
    {
        newFile = new FileModel();
        selectedFile = null;
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.FileCount > 0 ? e.File : null;

        messageStore.Clear(() => newFile.PdfFile);

        if (selectedFile == null || selectedFile.ContentType != "application/pdf")
        {
            var error = selectedFile == null ? "A PDF file must be uploaded." : "Only PDF files are allowed.";
            messageStore.Add(() => newFile.PdfFile, error);
            selectedFile = null;
        }

        editContext.NotifyValidationStateChanged();
    }

    //may need to change the way this is done if we want the Form Name to be displayed
    private void LoadFilesFromUploadsDirectory()
    {
        var uploadsFolderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads");
        if (Directory.Exists(uploadsFolderPath))
        {
            var files = Directory.GetFiles(uploadsFolderPath);
            fileList = files.Select(file => new FileItem
                {
                    Name = Path.GetFileName(file),
                    Link = $"/uploads/{Path.GetFileName(file)}"
                }).ToList();
        }
    }

    private async Task<string> SaveFileAsync(IBrowserFile file)
    {
        var uploadsFolderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads");
        Directory.CreateDirectory(uploadsFolderPath);
        var filePath = Path.Combine(uploadsFolderPath, file.Name);

        const long maxAllowedSize = 1000000;

        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            await file.OpenReadStream(maxAllowedSize).CopyToAsync(fileStream);
        }
        return $"/uploads/{file.Name}";
    }

    private async Task HandleValidSubmit()
    {
        if (!ValidateFile())
        {
            return;
        }

        Debug.WriteLine("HandleValidSubmit method called.\n");
        Debug.WriteLine($"Form Name: {newFile.FormName}");
        Debug.WriteLine($"Description: {newFile.Description}");
        Debug.WriteLine($"Expiration Date: {newFile.ExpirationDate.ToShortDateString()}\n");

        string filePath = string.Empty;
        if (selectedFile != null)
        {
            filePath = await SaveFileAsync(selectedFile);
            Debug.WriteLine($"File saved to: {filePath}");
        }

        Debug.WriteLine("Form Information:");
        Debug.WriteLine($"Short Description: {newFile.Description}");
        Debug.WriteLine($"Expiration Date: {newFile.ExpirationDate.ToShortDateString()}");
        Debug.WriteLine($"File Path: {filePath}");
        Debug.WriteLine($"Assigned To: {newFile.AssignedTo}\n");

        if (newFile.AssignedTo == -1) // Assign to all students
        {
            await CreateFormsForAllStudents(filePath);
        }
        else
        {
            // Handle other assignment scenarios here - specific students/classes/teachers/etc
        }

        // Uncomment when ready to save changes to the database
        // try
        // {
        //     await DbContext.SaveChangesAsync();
        // }
        // catch (Exception ex)
        // {
        //     Console.WriteLine($"Error saving changes: {ex.Message}");
        //     // Consider logging the exception
        // }

        // Reload files to update the list
        LoadFilesFromUploadsDirectory();

        ClearForm();
        isAddFileModalVisible = false;
    }

    private async Task CreateFormsForAllStudents(string filePath)
    {
        var students = await DbContext.Students.ToListAsync();
        foreach (var student in students)
        {
            var studentForm = new Form
                {
                    ShortDescription = newFile.Description,
                    ExpirationDate = newFile.ExpirationDate,
                    FilePath = filePath,
                    Status = "Assigned",
                    AssignedStudentId = student.StudentId
                };

            Debug.WriteLine("Creating form for all students:");
            Debug.WriteLine($"Short Description: {studentForm.ShortDescription}");
            Debug.WriteLine($"Expiration Date: {studentForm.ExpirationDate.ToShortDateString()}");
            Debug.WriteLine($"File Path: {studentForm.FilePath}");
            Debug.WriteLine($"Assigned Student ID: {studentForm.AssignedStudentId}\n");

            // Uncomment when ready to add to the database
            // DbContext.Forms.Add(studentForm);
        }
    }

    private void SignOut()
    {
        Debug.WriteLine("SignOut button clicked.");
        // Implement sign-out logic here
    }

    private void EditFile(FileItem file)
    {
        Debug.WriteLine($"Edit {file.Name}");
        // Implement edit functionality
    }

    private void DeleteFile(FileItem file)
    {
        Debug.WriteLine($"Delete {file.Name}");
        // Implement delete functionality
    }

    //Checks that the expiration date is in the future
    public class FutureDateAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is DateTime date)
            {
                if (date > DateTime.Now)
                {
                    return ValidationResult.Success;
                }
                else
                {
                    return new ValidationResult("Expiration Date must be in the future.");
                }
            }
            return new ValidationResult("Invalid date.");
        }
    }

    //may need to adjust for the form list??
    public class FileItem
    {
        public string Name { get; set; }
        public string Link { get; set; }
    }

    public class FileModel
    {
        [Required(ErrorMessage = "Form Name is required.")]
        public string FormName { get; set; } = string.Empty;

        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Expiration Date is required.")]
        [FutureDate(ErrorMessage = "Expiration Date must be in the future.")]
        public DateTime ExpirationDate { get; set; } = DateTime.Now.AddYears(1);

        public IBrowserFile PdfFile { get; set; }

        [Required(ErrorMessage = "Assigned To is required.")]
        public int? AssignedTo { get; set; } = -1;
    }
}

