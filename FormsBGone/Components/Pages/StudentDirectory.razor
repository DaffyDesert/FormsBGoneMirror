@page "/administrator/students"

@using FormsBGone.Model;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using System.IO;
@using System.Threading.Tasks;
@using System.Linq;
@using System.Diagnostics;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authorization;

@inject IAccountService accountService
@inject NavigationManager NavManager
@inject CapstoneContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

@if (Authorized)
{

    <div class="header">
        <h1>Welcome, @($"{currentAdmin?.FirstName} {currentAdmin?.LastName}")!</h1>
        <div class="header-right">
            <div class="dropdown">
                <button class="btn btn-dropdown">Directories</button>
                <div class="dropdown-content">
                    <a href="/administrator">Forms Directory</a>
                    <a href="/administrator/students">Student Directory</a>
                    <a href="/administrator/staff">Staff Directory</a>
                </div>
            </div>
            <button class="btn btn-signout" @onclick="SignOut">Sign Out</button>
        </div>
    </div>

    <hr />

    <div class="header-container">
        <div class="student-directory">
            <h2>Student Directory</h2>
        </div>

        <div class="search-container">
            <!-- Search Bar -->
            <div class="search-bar">
                <input id="search-entry" type="text" placeholder="Search students..." @bind="@searchQuery" @oninput="OnSearchInput" />
            </div>

            <!-- Filter Dropdown -->
            <div class="filter-dropdown">
                <select id="filter-dropdown" @onchange="OnFilterChange">
                    <option value="">All</option>
                    @foreach (var grade in availableGrades)
                    {
                        <option value="@grade">@($"{grade}th Grade")</option>
                    }
                </select>
            </div>
        </div>
    </div>

    @if (students.Any())
    {
        <ul class="student-list">
            @foreach (var student in filteredStudentList)
            {
                <li class="student-item">
                    <span>@($"{student.FirstName} {student.LastName}")</span>
                </li>
            }
        </ul>
    }
    else
    {
        <div class="no-students">
            <p>No students found.</p>
        </div>
    }


}
else
{
    <p>Error 401: Unauthorized</p>
}


@code {
    public bool Authorized = false;
    public Administrator currentAdmin = new Administrator();

    private string searchQuery = string.Empty;
    private string selectedFilter = string.Empty;

    public List<Student> students = new();
    public List<Student> filteredStudentList = new();
    private List<int> availableGrades = new(); // List to store unique grades

    // Load Page
    protected override async Task OnInitializedAsync()
    {
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        Authorized = await customAuthProvider.IsAuthenticated("Admin");

        if (Authorized)
        {
            try
            {
                currentAdmin = await GetCurrentAdminDetails();

                students = await DbContext.Students.ToListAsync();
                filteredStudentList = students; // Initial load shows all students

                availableGrades = students.Select(s => s.Grade).Distinct().OrderBy(g => g).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving data: {ex.Message}");
            }
        }
    }

    public async Task<Administrator> GetCurrentAdminDetails()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

            if (!string.IsNullOrEmpty(email))
            {
                return await DbContext.Administrators
                    .FirstOrDefaultAsync(a => a.Email == email);
            }
        }

        throw new UnauthorizedAccessException("User is not authenticated or the email is invalid.");
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        FilterStudents();
    }

    private void FilterStudents()
    {
        int? gradeFilter = int.TryParse(selectedFilter, out var grade) ? grade : (int?)null;

        filteredStudentList = students
            .Where(s => (string.IsNullOrEmpty(searchQuery) ||
            $"{s.FirstName} {s.LastName}".Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
                        (!gradeFilter.HasValue || s.Grade == gradeFilter)) // Use parsed grade filter if available
            .ToList();
    }

    private void OnFilterChange(ChangeEventArgs e)
    {
        selectedFilter = e.Value?.ToString() ?? string.Empty;
        FilterStudents();
    }

    private async Task SignOut()
    {
        // Invalidate the authentication state
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthProvider.Logout();

        NavManager.NavigateTo("/", true);
    }
}


