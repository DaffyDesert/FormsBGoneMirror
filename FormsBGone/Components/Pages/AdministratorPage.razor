@page "/administrator"

@using FormsBGone.Model;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using System.IO;
@using System.Threading.Tasks;
@using System.Linq;
@using System.Diagnostics;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authorization;

@inject IAccountService accountService
@inject IJSRuntime js
@inject NavigationManager NavManager
@inject CapstoneContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

@if (Authorized)
{

    <div class="header">
        <h1>Welcome, @($"{currentAdmin?.FirstName} {currentAdmin?.LastName}")!</h1>
        <div class="header-right">
            <div class="dropdown">
                <button class="btn btn-dropdown">Directories</button>
                <div class="dropdown-content">
                    <a href="/administrator">Forms Directory</a>
                    <a href="#">Student Directory</a>
                    <a href="#">Staff Directory</a>
                </div>
            </div>
            <button class="btn btn-signout" @onclick="SignOut">Sign Out</button>
        </div>
    </div>

    <hr />

    <div class="header-container">
        <div class="forms-directory">
            <h2>Forms Directory</h2>
        </div>
        <div class="add-file-btn">
            <button class="btn btn-primary" @onclick="ShowAddFileModal">
                <i class="fas fa-plus"></i> Add Form
            </button>
        </div>
    </div>

    <ul class="file-list">
        @foreach (var file in fileList)
        {
            <li class="file-item">
                <a href="@file.Link" target="_blank">@file.Name</a>
                <div class="file-item-buttons">
                    <button class="btn btn-secondary" @onclick="() => EditFile(file)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => ShowDeleteFileConfirmation(file)">Delete</button>
                </div>
            </li>
        }
    </ul>

    @if (isAddFileModalVisible)
    {
        <div class="modal-overlay">
            <div class="modal">
                <h2>Add New Form</h2>
                <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                    <label for="formName">Form Name:</label>
                    <InputText id="formName" class="custom-form-control" @bind-Value="newFile.FormName" />
                    </div>

                    <div class="form-group">
                    <label for="description">Short Description (Optional):</label>
                    <InputText id="description" class="custom-form-control" @bind-Value="newFile.Description" />
                    </div>

                    <div class="form-group">
                    <label for="expirationDate">Expiration Date:</label>
                    <InputDate id="expirationDate" class="custom-form-control" @bind-Value="newFile.ExpirationDate" />
                    </div>

                    <div class="form-group">
                    <label for="pdfFile">Upload PDF:</label>
                    <InputFile id="pdfFile" class="custom-form-control" OnChange="HandleFileSelected" />
                    </div>

                    <div class="form-group">
                    <label for="assignedTo">Assigned To:</label>
                    <select id="assignedTo" class="custom-form-control" @bind="newFile.AssignedTo">
                    <option value="">-- Select --</option>
                    <option value="-1">All</option>
                    </select>
                    </div>

                    <div class="button-group">
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" @onclick="HideAddFileModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    @if (isEditFileModalVisible)
    {
        <div class="modal-overlay">
            <div class="modal">
                <h2>Edit Form</h2>
                <EditForm EditContext="editContext" OnValidSubmit="HandleValidEditSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="editFormName">Form Name:</label>
                        <InputText id="editFormName" class="custom-form-control" @bind-Value="fileToEdit.FormName" />
                    </div>

                    <div class="form-group">
                        <label for="editDescription">Short Description (Optional):</label>
                        <InputText id="editDescription" class="custom-form-control" @bind-Value="fileToEdit.Description" />
                    </div>

                    <div class="form-group">
                        <label for="editExpirationDate">Expiration Date:</label>
                        <InputDate id="editExpirationDate" class="custom-form-control" @bind-Value="fileToEdit.ExpirationDate" />
                    </div>

                    <div class="button-group">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <button type="button" class="btn btn-secondary" @onclick="HideEditFileModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }




    @if (isDeleteConfirmationVisible)
    {
        <div class="confirm-overlay" @onclick="HideDeleteFileConfirmation">
            <div class="confirm-modal" @onclick:stopPropagation="true">
                <h2>Confirm Deletion</h2>
                <p>Are you sure you want to delete the form '<strong>@fileToDelete?.Name</strong>'?</p>
                <div class="button-group">
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                    <button class="btn btn-secondary" @onclick="HideDeleteFileConfirmation">Cancel</button>
                </div>
            </div>
        </div>
    }

}
else
{
    <p>Error 401: Unauthorized</p>
}


@code {
    public bool Authorized = false;
    private Administrator currentAdmin;
    private FileModel newFile = new FileModel();
    private FileModel fileToEdit;
    private FileItem fileToDelete;

    private List<FileItem> fileList = new();

    private bool isAddFileModalVisible = false;
    private bool isEditFileModalVisible = false;
    private bool isDeleteConfirmationVisible = false;

    private IBrowserFile selectedFile;
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private string originalFilePath;
    private string fileError = string.Empty;

    // Load Page
    protected override async Task OnInitializedAsync()
    {
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        Authorized = await customAuthProvider.IsAuthenticated("Admin");

        if (Authorized)
        {
            try
            {
                currentAdmin = await GetCurrentAdminDetails();
                editContext = new EditContext(newFile);
                messageStore = new ValidationMessageStore(editContext);
                editContext.OnFieldChanged += HandleFieldChanged;

                LoadFilesFromUploadsDirectory();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving admin data: {ex.Message}");
            }
        }
    }

    // Handles changes to fields in the form
    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        // Clear validation messages for new file model
        if (editContext.Model == newFile && e.FieldIdentifier.FieldName == nameof(newFile.FormName))
        {
            messageStore.Clear(e.FieldIdentifier);
            StateHasChanged();
        }
        // Clear validation messages for editing an existing file
        else if (editContext.Model == fileToEdit && e.FieldIdentifier.FieldName == nameof(fileToEdit.FormName))
        {
            messageStore.Clear(e.FieldIdentifier);
            StateHasChanged();
        }
    }

    private async Task<Administrator> GetCurrentAdminDetails()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

            if (!string.IsNullOrEmpty(email))
            {
                return await DbContext.Administrators
                    .FirstOrDefaultAsync(a => a.Email == email);
            }
        }

        throw new UnauthorizedAccessException("User is not authenticated or the email is invalid.");
    }

    private void LoadFilesFromUploadsDirectory()
    {
        var uploadsFolderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "base");
        if (Directory.Exists(uploadsFolderPath))
        {
            var files = Directory.GetFiles(uploadsFolderPath);
            fileList = files.Select(file => new FileItem
                {
                    Name = Path.GetFileName(file),
                    Link = $"/uploads/base/{Path.GetFileName(file)}"
                }).ToList();
        }
    }

    private void ClearForm()
    {
        newFile = new FileModel();
        selectedFile = null;
    }

    // Add File Modal
    private void ShowAddFileModal() => isAddFileModalVisible = true;

    private void HideAddFileModal()
    {
        isAddFileModalVisible = false;
        ClearForm();
    }

    private void HideEditFileModal()
    {
        isEditFileModalVisible = false; 
        ClearEditForm(); 
    }

    private void ClearEditForm()
    {
        fileToEdit = new FileModel(); 
    }


    // Edit File Modal
    private async Task HandleValidEditSubmit()
    {
        if (fileToEdit == null)
        {
            Debug.WriteLine("No file to edit.");
            return;
        }

        // Find all form entries for the given original file path
        var formsToUpdate = await DbContext.Forms
            .Where(f => f.FilePath.Contains($"/{Path.GetFileName(originalFilePath)}"))
            .ToListAsync();

        if (formsToUpdate.Any())
        {
            Debug.WriteLine($"Found {formsToUpdate.Count} form(s) to update.");

            // Handle base file rename (not part of the database)
            var oldFileName = Path.GetFileName(originalFilePath);
            var newFileName = fileToEdit.FormName + Path.GetExtension(originalFilePath);

            var oldBaseFilePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "base", oldFileName);
            var newBaseFilePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "base", newFileName);

            // Rename the base file (admin's version)
            if (File.Exists(oldBaseFilePath))
            {
                File.Move(oldBaseFilePath, newBaseFilePath);
                Debug.WriteLine($"Renamed base file from {oldBaseFilePath} to {newBaseFilePath}");
            }
            else
            {
                Debug.WriteLine($"Base file not found: {oldBaseFilePath}");
            }

            // Update all the student files and database entries
            foreach (var form in formsToUpdate)
            {
                Debug.WriteLine($"Updating form with original file path: {form.FilePath}");

                // Update form details (name, description, expiration date)
                form.FormName = fileToEdit.FormName;
                form.ShortDescription = fileToEdit.Description;
                form.ExpirationDate = fileToEdit.ExpirationDate;

                // Check if the form name (file name) has changed, and update the student file path if necessary
                var oldStudentFileName = Path.GetFileName(originalFilePath);
                var newStudentFileName = fileToEdit.FormName + Path.GetExtension(originalFilePath);

                var oldStudentFilePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", form.FilePath.TrimStart('/'));
                var newStudentFilePath = form.FilePath.Replace(oldStudentFileName, newStudentFileName);
                var newStudentFilePathFull = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", newStudentFilePath.TrimStart('/'));

                if (File.Exists(oldStudentFilePath))
                {
                    File.Move(oldStudentFilePath, newStudentFilePathFull);
                    Debug.WriteLine($"Renamed student file from {oldStudentFilePath} to {newStudentFilePathFull}");
                }
                else
                {
                    Debug.WriteLine($"Student file not found: {oldStudentFilePath}");
                }

                // Update the file path in the form entry
                form.FilePath = newStudentFilePath;

                // Mark the form as modified in the context
                DbContext.Forms.Update(form);
            }

            // Save the changes to the database
            await DbContext.SaveChangesAsync();
            Debug.WriteLine($"Updated {formsToUpdate.Count} form(s) with new details: {fileToEdit.FormName}, {fileToEdit.Description}, {fileToEdit.ExpirationDate}");
        }
        else
        {
            Debug.WriteLine($"No forms found for the original file path: {originalFilePath}");
        }

        // Reload files to reflect the changes
        LoadFilesFromUploadsDirectory();

        // Hide the edit modal
        isEditFileModalVisible = false;
    }



    // Delete File Modal
    private async Task ShowDeleteFileConfirmation(FileItem file) => (fileToDelete, isDeleteConfirmationVisible) = (file, true);
    private void HideDeleteFileConfirmation() => (isDeleteConfirmationVisible, fileToDelete) = (false, null);


    private async Task ConfirmDelete()
    {
        if (fileToDelete != null)
        {
            await DeleteFile(fileToDelete);
        }

        isDeleteConfirmationVisible = false; 
        fileToDelete = null; 
    }

    ////----------------------------------------------------------------------------------------------------------------////

    // Add Form Functionality
    private async Task HandleValidSubmit()
    {
        if (!ValidateFile())
        {
            return;
        }

        string filePath = string.Empty;
        string filePathWithoutBase = string.Empty;
        if (selectedFile != null)
        {
            filePath = await SaveFileAsync(selectedFile);
            Debug.WriteLine($"File saved to: {filePath}");
            filePathWithoutBase = filePath.Replace("/base", "");
        }

        if (newFile.AssignedTo == -1) // Assign to all students
        {
            await CreateFormsForAllStudents(filePathWithoutBase, selectedFile);
        }
        else
        {
            // Handle other assignment scenarios here - specific students/classes/teachers/etc
        }

        try
        {
            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving changes: {ex.Message}");
        }

        // Reload files to update the list
        LoadFilesFromUploadsDirectory();

        ClearForm();
        isAddFileModalVisible = false;
    }

    private bool ValidateFile()
    {
        bool isValid = true;
        messageStore.Clear();

        if (selectedFile == null)
        {
            messageStore.Add(() => newFile.PdfFile, "A PDF file must be uploaded.");
            isValid = false;
        }
        else if (selectedFile.ContentType != "application/pdf")
        {
            messageStore.Add(() => newFile.PdfFile, "Only PDF files are allowed.");
            isValid = false;
        }

        editContext.NotifyValidationStateChanged();
        return isValid;
    }

    // Makes sure selected file is a pdf 
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.FileCount > 0 ? e.File : null;

        messageStore.Clear(() => newFile.PdfFile);

        if (selectedFile == null || selectedFile.ContentType != "application/pdf")
        {
            var error = selectedFile == null ? "A PDF file must be uploaded." : "Only PDF files are allowed.";
            messageStore.Add(() => newFile.PdfFile, error);
            selectedFile = null;
        }

        editContext.NotifyValidationStateChanged();
    }

    // Adds file to uploads folder
    private async Task<string> SaveFileAsync(IBrowserFile file)
    {
        var uploadsFolderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "base");
        Directory.CreateDirectory(uploadsFolderPath);

        // Use the form name for the saved file instead of the uploaded file name
        var fileName = newFile.FormName + Path.GetExtension(file.Name);  // Use the form name as file name
        var filePath = Path.Combine(uploadsFolderPath, fileName);

        const long maxAllowedSize = 10000000;

        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            await file.OpenReadStream(maxAllowedSize).CopyToAsync(fileStream);
        }

        return $"/uploads/base/{fileName}";
    }




    //big changes here
    private async Task CreateFormsForAllStudents(string filePath, IBrowserFile file)
    {
        int maxFormId = 0;

        // Only get the max value if forms exist in the database
        if (await DbContext.Forms.AnyAsync())
        {
            maxFormId = await DbContext.Forms.MaxAsync(f => f.FormId);
        }

        var students = await DbContext.Students.ToListAsync();
        foreach (var student in students)
        {
            var studentForm = new Form
                {
                    FormId = ++maxFormId,
                    ShortDescription = newFile.Description,
                    ExpirationDate = newFile.ExpirationDate,
                    FilePath = filePath,  // This will be the base file path initially
                    Status = "Assigned",
                    AssignedStudentId = student.StudentId,
                    FormName = newFile.FormName
                };
            DbContext.Forms.Add(studentForm);

            // Create a file for each student in their directory
            var studentDirectoryPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", student.StudentId.ToString());
            Directory.CreateDirectory(studentDirectoryPath);

            // Ensure the file name in the student directory matches the form name
            var studentFileName = newFile.FormName + Path.GetExtension(file.Name);
            var studentFilePath = Path.Combine(studentDirectoryPath, studentFileName);

            const long maxAllowedSize = 10000000;

            // Copy the file to each student's directory
            using (var fileStream = new FileStream(studentFilePath, FileMode.Create))
            {
                await file.OpenReadStream(maxAllowedSize).CopyToAsync(fileStream);
            }

            // Update the form entry for this student to use the student-specific file path
            studentForm.FilePath = $"/uploads/{student.StudentId}/{studentFileName}";
        }

        await DbContext.SaveChangesAsync();
    }



    // Edit File Functionality
    private void EditFile(FileItem file)
    {
        // Log the file name and query being made
        Debug.WriteLine($"Searching for file: {file.Name}");

        // Fetch the data from the database and then perform case-insensitive matching in-memory
        var formToEdit = DbContext.Forms
            .AsEnumerable()  // Switch to client-side evaluation
            .FirstOrDefault(f => f.FilePath.EndsWith($"/{file.Name}", StringComparison.OrdinalIgnoreCase));  // Case-insensitive comparison

        if (formToEdit != null)
        {
            Debug.WriteLine($"Found form with file path: {formToEdit.FilePath}");

            // Populate the fileToEdit model with the data from the form
            fileToEdit = new FileModel
                {
                    FormName = formToEdit.FormName,
                    Description = formToEdit.ShortDescription,
                    ExpirationDate = formToEdit.ExpirationDate,
                    AssignedTo = -1 // You may need to adjust this based on your actual logic
                };

            // Store the original file path for reference during renaming
            originalFilePath = formToEdit.FilePath;

            // Create a new EditContext for form editing
            editContext = new EditContext(fileToEdit);
            isEditFileModalVisible = true;
        }
        else
        {
            Debug.WriteLine($"File not found in the database for {file.Name}. Double-check the database entries.");
        }
    }


    
    // Delete File Functionality
    private async Task DeleteFile(FileItem file)
    {
        // Delete the base file from the admin uploads folder
        var baseFilePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "base", file.Name);
        if (File.Exists(baseFilePath))
        {
            File.Delete(baseFilePath);
            Debug.WriteLine($"Deleted base file: {baseFilePath}");
        }
        else
        {
            Debug.WriteLine($"Base file not found: {baseFilePath}");
        }

        // Get all the form entries associated with the file
        var formsToDelete = await DbContext.Forms
            .Where(f => f.FilePath.EndsWith($"/{file.Name}"))  // Match exactly the file name
            .ToListAsync();

        if (formsToDelete.Any())
        {
            // Loop through each form and delete the file from the student's directory
            foreach (var form in formsToDelete)
            {
                // Construct the student file path from the form entry's FilePath
                var studentFilePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", form.FilePath.TrimStart('/'));

                if (File.Exists(studentFilePath))
                {
                    File.Delete(studentFilePath);
                    Debug.WriteLine($"Deleted student file: {studentFilePath}");
                }
                else
                {
                    Debug.WriteLine($"Student file not found: {studentFilePath}");
                }
            }

            // Remove associated entries from the database
            DbContext.Forms.RemoveRange(formsToDelete);
            await DbContext.SaveChangesAsync();
            Debug.WriteLine($"Deleted {formsToDelete.Count} form entries from the database.");
        }
        else
        {
            Debug.WriteLine($"No forms found for {file.Name}.");
        }

        // Reload the list of files after deletion
        LoadFilesFromUploadsDirectory();
    }



    private async Task SignOut()
    {
        // Invalidate the authentication state
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthProvider.Logout();

        NavManager.NavigateTo("/", true);
    }

    //Checks that the expiration date is in the future
    public class FutureDateAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is DateTime date)
            {
                if (date > DateTime.Now)
                {
                    return ValidationResult.Success;
                }
                else
                {
                    return new ValidationResult("Expiration Date must be in the future.");
                }
            }
            return new ValidationResult("Invalid date.");
        }
    }

    public class FileItem
    {
        public string Name { get; set; }
        public string Link { get; set; }
    }

    public class FileModel
    {
        [Required(ErrorMessage = "Form Name is required.")]
        public string FormName { get; set; } = string.Empty;

        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Expiration Date is required.")]
        [FutureDate(ErrorMessage = "Expiration Date must be in the future.")]
        public DateTime ExpirationDate { get; set; } = DateTime.Now.AddYears(1);

        public IBrowserFile PdfFile { get; set; }

        [Required(ErrorMessage = "Assigned To is required.")]
        public int? AssignedTo { get; set; } = -1;
    }
}

