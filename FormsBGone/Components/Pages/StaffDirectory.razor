@page "/administrator/staff"

@using FormsBGone.Model;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using System.IO;
@using System.Threading.Tasks;
@using System.Linq;
@using System.Diagnostics;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authorization;

@inject IAccountService accountService
@inject NavigationManager NavManager
@inject CapstoneContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

@if (Authorized)
{

    <div class="header">
        <h1>Welcome, @($"{currentAdmin?.FirstName} {currentAdmin?.LastName}")!</h1>
        <div class="header-right">
            <div class="dropdown">
                <button class="btn btn-dropdown">Directories</button>
                <div class="dropdown-content">
                    <a href="/administrator">Forms Directory</a>
                    <a href="/administrator/students">Student Directory</a>
                    <a href="/administrator/staff">Staff Directory</a>
                </div>
            </div>
            <button class="btn btn-signout" @onclick="SignOut">Sign Out</button>
        </div>
    </div>

    <hr />

    <div class="header-container">
        <div class="staff-directory">
            <h2>Staff Directory</h2>
        </div>
    </div>
}
else
{
    <p>Error 401: Unauthorized</p>
}


@code {
    public string UploadFilePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "base");
    public bool Authorized = false;
    public Administrator currentAdmin = new Administrator();

    // Load Page
    protected override async Task OnInitializedAsync()
    {
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        Authorized = await customAuthProvider.IsAuthenticated("Admin");

        if (Authorized)
        {
            try
            {
                currentAdmin = await GetCurrentAdminDetails();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving admin data: {ex.Message}");
            }
        }
    }

    public async Task<Administrator> GetCurrentAdminDetails()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

            if (!string.IsNullOrEmpty(email))
            {
                return await DbContext.Administrators
                    .FirstOrDefaultAsync(a => a.Email == email);
            }
        }

        throw new UnauthorizedAccessException("User is not authenticated or the email is invalid.");
    }

    private async Task SignOut()
    {
        // Invalidate the authentication state
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthProvider.Logout();

        NavManager.NavigateTo("/", true);
    }
}