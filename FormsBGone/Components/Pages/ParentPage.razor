@page "/parent"
@using Microsoft.EntityFrameworkCore
@using FormsBGone.Model
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Authorization
@using System.Threading.Tasks;
@using System.Security.Claims;
@rendermode InteractiveServer

@inject CapstoneContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

@if (Authorized)
{
    <div class="header">
        <h1>Welcome, @($"{currentParent?.FirstName} {currentParent?.LastName}")!</h1>
        <button class="btn btn-signout" @onclick="SignOut">Sign Out</button>
    </div>

    <hr />

    <div class="header-container">
        <div class="student-directory">
            <h2>Your Children</h2>
        </div>

        <!-- Search Bar -->
        <div class="search-container">
            <div class="search-bar">
                <input type="text" placeholder="Search children..." @bind="@searchQuery" @oninput="OnSearchInput" />
            </div>
        </div>
    </div>

    <!-- Student List -->
    <div class="student-list-container">
        @if (filteredChildren.Any())
        {
            <ul class="student-list">
                @foreach (var child in filteredChildren)
                {
                    <li class="student-item">
                        <span>@($"{child.FirstName} {child.LastName}")</span>
                        <button class="btn btn-view-forms" @onclick="async () => await ShowViewFormsModal(child.StudentId)">View Forms</button>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No children found.</p>
        }
    </div>

    <!-- Forms Modal -->
    @if (isViewFormsModalVisible)
    {
        <div class="modal-overlay">
            <div class="modal">
                <h3>Form Directory: @selectedChild?.FirstName @selectedChild?.LastName</h3>

                @if (selectedChildForms?.Any() == true)
                {
                    <ul class="form-list">
                        @foreach (var form in selectedChildForms)
                        {
                            @if (!string.IsNullOrWhiteSpace(form.FormName)) // Check if the form name is not empty
                            {
                                <li class="form-item">
                                    <strong>@form.FormName</strong>
                                    <span class="status-box @GetStatusClass(form.Status)">
                                        @form.Status
                                    </span>
                                    @if (form.Status != "Completed")
                                    {
                                        <button class="btn btn-fill-form" @onclick="() => RedirectToFillFormPage(selectedChild.StudentId, form.FormId)">Fill Form</button>
                                    }
                                </li>
                            }
                        }

                    </ul>
                }
                else
                {
                    <p>No forms found for @selectedChild.FirstName @selectedChild.LastName.</p>
                }

                <button class="btn btn-close" @onclick="HideViewFormsModal"></button>
            </div>
        </div>
    }
}
else
{
    <p>Error 401: Unauthorized</p>
}

@code {
    private bool Authorized = false;
    private bool isViewFormsModalVisible = false;
    private bool isPdfViewerVisible = false;
    private string pdfUrl = string.Empty;
    private string searchQuery = string.Empty;
    private Parent currentParent;
    private List<Student> children = new();
    private List<Student> filteredChildren = new();
    private List<Form> selectedChildForms = new();
    private Student selectedChild;

    protected override async Task OnInitializedAsync()
    {
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        Authorized = await customAuthProvider.IsAuthenticated("Parent");

        if (Authorized)
        {
            try
            {
                currentParent = await GetCurrentParentDetails();
                if (currentParent != null)
                {
                    children = currentParent.Students.ToList(); // Fetch children assigned to this parent
                    filteredChildren = children; // Initial load shows all children
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving parent data: {ex.Message}");
            }
        }
    }

    private async Task<Parent> GetCurrentParentDetails()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

            if (!string.IsNullOrEmpty(email))
            {
                return await DbContext.Parents
                    .Include(p => p.Students)
                    .ThenInclude(s => s.Forms)
                    .FirstOrDefaultAsync(p => p.Email == email);
            }
        }

        throw new UnauthorizedAccessException("User is not authenticated or the email is invalid.");
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        FilterChildren();
    }

    private void FilterChildren()
    {
        filteredChildren = children
            .Where(c => string.IsNullOrEmpty(searchQuery) || $"{c.FirstName} {c.LastName}".Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task ShowViewFormsModal(int studentId)
    {
        await LoadChildForms(studentId);
        isViewFormsModalVisible = true;
    }

    private async Task LoadChildForms(int studentId)
    {
        selectedChild = children.FirstOrDefault(c => c.StudentId == studentId);

        if (selectedChild != null)
        {
            selectedChildForms = await DbContext.Forms
                .Where(f => f.AssignedStudentId == studentId && !string.IsNullOrEmpty(f.FormName)) // Exclude empty forms
                .ToListAsync();
        }
    }

    private Task RedirectToFillFormPage(int studentId, int formId)
    {
        var url = $"/fillform/{studentId}/{formId}";
        NavManager.NavigateTo(url);
        return Task.CompletedTask;
    }

    private void HideViewFormsModal()
    {
        isViewFormsModalVisible = false;
        selectedChildForms.Clear();
        selectedChild = null;
    }

    private async Task SubmitForm()
    {
        var form = selectedChildForms.FirstOrDefault();
        if (form != null)
        {
            form.Status = "Completed";
            await DbContext.SaveChangesAsync();
            isPdfViewerVisible = false;
        }
    }

    private async Task SignOut()
    {
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthProvider.Logout();
        NavManager.NavigateTo("/", true);
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Assigned" => "status-assigned",
            "Not Reviewed" => "status-not-reviewed",
            "Completed" => "status-completed",
            _ => "status-unknown"
        };
    }
}