@page "/"
@inject IAccountService accountService
@inject IJSRuntime js
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<div class="landing-page">
    <div class="login-wrapper">
        <div class="login-content">
            <div class="logo-section">
                <img src="/Images/logoText.png" alt="Forms-B-Gone Logo">
            </div>
            <EditForm Model="@Login" OnValidSubmit="HandleLogin">
                <input type="text" placeholder="Username" @bind="Login.Username" />
                <input type="password" placeholder="Password" @bind="Login.Password" />
                <button type="submit" class="btn btn-primary large-btn" @onclick="HandleLogin">Login</button>
                <ValidationSummary />
            </EditForm>

            <div class="signup">
                <span class="signup">
                    Don't have an account?
                    <a href="/signup">Sign Up</a>
                </span>
            </div>
        </div>
    </div>
</div>

@code {
    LoginDTO Login = new();

    private async Task HandleLogin()
    {
        LoginResponse response = await accountService.LoginAsync(Login);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);

        if (Constants.UserRole == "Parent") NavManager.NavigateTo("/parent", forceLoad: true);
        if (Constants.UserRole == "Teacher") NavManager.NavigateTo("/teacher", forceLoad: true);
        if (Constants.UserRole == "Admin") NavManager.NavigateTo("/administrator", forceLoad: true);
    }
}