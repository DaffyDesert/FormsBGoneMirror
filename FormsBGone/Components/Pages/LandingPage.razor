@page "/"
@using FormsBGone.Services
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject JwtAuthenticationService AuthService
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<div class="login-wrapper">
    <form onsubmit="return false;">
        <input type="text" placeholder="Username" @bind="Username" />
        <input type="password" placeholder="Password" @bind="Password" />
        <input type="button" value="Login" @onclick="HandleLogin" />
    </form>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div>@ErrorMessage</div>
    }
</div>

@code {
    private string Username { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; }

    private async Task HandleLogin()
    {
        ErrorMessage = string.Empty;

        var token = AuthService.Authenticate(Username, Password);
        if (token == null)
        {
            ErrorMessage = "Invalid username or password.";
            return;
        }

        // Store the JWT in local storage
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);

        // Decode the token to extract the role
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var role = jwtToken.Claims.FirstOrDefault(c => c.Type == "role")?.Value;

        if (role == null)
        {
            ErrorMessage = "Role not found.";
            return;
        }

        // Navigate based on the user's role
        switch (role)
        {
            case "Parent":
                Navigation.NavigateTo("/parent");
                break;
            case "Teacher":
                Navigation.NavigateTo("/teacher");
                break;
            case "Admin":
                Navigation.NavigateTo("/administrator");
                break;
            default:
                ErrorMessage = "Role not recognized.";
                break;
        }
    }
}
