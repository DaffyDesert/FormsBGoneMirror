@attribute [TestClass]
@inherits BunitTestContext
@code
{
	[TestMethod]
	public void TestAdminPageView_Unauthenticated()
	{
		// Set up
		SetUpServices();

		// Logout
		var customAuthStateProvider = (CustomAuthenticationStateProvider)Services.GetService<AuthenticationStateProvider>()!;
		customAuthStateProvider.Logout().Wait();

		// Act
		var cut = RenderComponent<AdministratorPage>();

		// Validate
		Assert.AreEqual(false, cut.Instance.Authorized);
	}

	[TestMethod]
	public void TestAdminPageView_Authorized()
	{
		// Set up
		SetUpServices();

		// Log in and Authorize
		var response = Services.GetService<IAccountService>()!.LoginAsync(new LoginDTO()
			{
				Username = "admin3",
				Password = "password"
			}).Result;
		var customAuthStateProvider = (CustomAuthenticationStateProvider)Services.GetService<AuthenticationStateProvider>()!;
		customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);

		// Act
		var cut = RenderComponent<AdministratorPage>();

		// Validate
		Assert.AreEqual(true, cut.Instance.Authorized);
		Assert.IsNotNull(cut.Instance.currentAdmin);
		Assert.IsNotNull(cut.Instance.editContext);
		Assert.IsNotNull(cut.Instance.messageStore);

		// Logout
		customAuthStateProvider.Logout().Wait();
	}

	[TestMethod]
	public void TestAdminPageView_Authenticated_Unauthorized()
	{
		// Set up
		SetUpServices();

		// Log in and Authorize
		var response = Services.GetService<IAccountService>()!.LoginAsync(new LoginDTO()
			{
				Username = "dummy1",
				Password = "dummy!"
			}).Result;
		var customAuthStateProvider = (CustomAuthenticationStateProvider)Services.GetService<AuthenticationStateProvider>()!;
		customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);

		// Act
		var cut = RenderComponent<AdministratorPage>();

		// Validate
		Assert.AreEqual(false, cut.Instance.Authorized);

		// Logout
		customAuthStateProvider.Logout().Wait();
	}

	[TestMethod]
	public void TestGetCurrentAdminDetails()
	{
		// Set up
		SetUpServices();

		// Log in and Authorize
		var response = Services.GetService<IAccountService>()!.LoginAsync(new LoginDTO()
			{
				Username = "admin3",
				Password = "password"
			}).Result;
		var customAuthStateProvider = (CustomAuthenticationStateProvider)Services.GetService<AuthenticationStateProvider>()!;
		customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);

		// Act
		var cut = RenderComponent<AdministratorPage>();

		Thread.Sleep(5000); // Wait for SQL server to catch up

		var result = cut.Instance.GetCurrentAdminDetails().Result;

		Assert.AreEqual("admin3@example.com", result.Email);
		Assert.AreEqual(3, result.AdminId);
		Assert.AreEqual("Admin", result.FirstName);
		Assert.AreEqual("R", result.MiddleInitial);
		Assert.AreEqual("Three", result.LastName);
	}

	[TestMethod]
	public void TestLoadFilesFromUploadsDirectory()
	{
		throw new NotImplementedException();

		// Set up
		SetUpServices();

		// Log in and Authorize
		var response = Services.GetService<IAccountService>()!.LoginAsync(new LoginDTO()
			{
				Username = "admin3",
				Password = "password"
			}).Result;
		var customAuthStateProvider = (CustomAuthenticationStateProvider)Services.GetService<AuthenticationStateProvider>()!;
		customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);

		// Act
		var cut = RenderComponent<AdministratorPage>();
		cut.Instance.LoadFilesFromUploadsDirectory();

		Assert.AreNotEqual(0, cut.Instance.fileList.Count);
	}

}